// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum OrderStatus {
  PENDING
  PROCESSING
  PACKAGED
  SHIPPED
  DELIVERED
  CANCELLED
  FAILED
}

enum PaymentMethod {
  COD
  ONLINE
}

enum UserRole {
  ADMIN
  USER
}

enum NotificationType {
  ORDER_CREATED
  ORDER_STATUS_CHANGED
  PRODUCT_LOW_STOCK
  USER_REGISTERED
  SYSTEM_ALERT
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  phone     String?
  role      UserRole @default(USER)
  
  // Authentication fields
  password            String?   // bcrypt hashed password
  emailVerified       Boolean   @default(false) // Email verification status
  emailVerificationOtp String?  // OTP for email verification
  emailVerificationOtpExpires DateTime? // OTP expiration time
  lastLoginAt         DateTime? // Track last login for security
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  orders        Order[]
  reviews       Review[]
  wishlist      Wishlist[]
  notifications Notification[]
  cartItems     CartItem[]

  // For user search in admin (name, email, phone)
  @@index([name])                 
  @@index([phone])                
  @@index([email, role])

  @@map("users")
}

model Product {
  id          String   @id @default(cuid())
  name        String
  slug        String   @unique
  description String
  price         Decimal  @db.Decimal(10, 2)
  originalPrice Decimal @db.Decimal(10, 2)
  costPrice     Decimal @db.Decimal(10, 2)
  sku           String  @unique
  stock       Int      @default(0)
  images      String[]
  categoryId  String
  brand       String
  weight      Decimal @db.Decimal(8, 2)
  dimensions  String?
  specifications Json?
  isActive    Boolean  @default(true)
  isFeatured  Boolean  @default(false)
  tags        String[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  category   Category  @relation(fields: [categoryId], references: [id])
  orderItems OrderItem[]
  reviews    Review[]
  wishlist   Wishlist[]
  cartItems  CartItem[]

  @@index([categoryId])
  @@index([isActive])
  @@index([isFeatured])
  @@index([slug])
  @@index([price])
  @@index([categoryId, isActive])

  // For text search queries (name, brand, description)
  @@index([isActive, name])       
  @@index([isActive, brand])      

  // For tag-based searches (most impactful for your tag queries)
  @@index([tags])                 
  @@index([isActive, tags])  
  @@map("products")
}

model Order {
  id            String        @id @default(cuid())
  orderNumber   String        @unique
  userId        String
  status        OrderStatus   @default(PENDING)
  paymentMethod PaymentMethod @default(COD)
  subtotal      Decimal       @db.Decimal(10, 2)
  shippingCost  Decimal       @db.Decimal(10, 2) @default(0)
  total         Decimal       @db.Decimal(10, 2)
  
  // Shipping Information
  shippingName     String
  shippingPhone    String
  shippingAddress  String
  shippingCity     String
  shippingDistrict String
  shippingProvince String

  
  // Order Notes
  notes String?
  
  // Featured flag for dashboard
  isFeatured Boolean @default(false)
  
  // Order reason (for cancellation/failure)
  reason String?
  
  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user           User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  orderItems     OrderItem[]
  statusHistory  OrderStatusHistory[]

  @@index([userId])
  @@index([status])
  @@index([createdAt])
  @@index([userId, status])
    // For admin dashboard analytics
  @@index([status, createdAt])    
  @@index([createdAt, status])    

  // For revenue calculations  
@@index([status, total])  
  @@map("orders")
}

model OrderItem {
  id        String  @id @default(cuid())
  orderId   String
  productId String
  quantity  Int
  price     Decimal @db.Decimal(10, 2)

  // Relations
  order   Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id])

  @@index([orderId])
  @@index([productId])
 
  @@map("order_items")
}

model OrderStatusHistory {
  id        String      @id @default(cuid())
  orderId   String
  status    OrderStatus
  reason    String?
  updatedBy String
  createdAt DateTime    @default(now())

  // Relations
  order Order @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@map("order_status_history")
}

model Review {
  id        String   @id @default(cuid())
  userId    String
  productId String
  rating    Int      // 1-5 stars
  comment   String?
  isVerified Boolean @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([userId, productId])
  @@index([productId])
  @@index([rating])
  // Review model (if exists)
  @@index([productId, rating])    
  @@index([productId, createdAt]) 
  @@map("reviews")
}

model Wishlist {
  id        String   @id @default(cuid())
  userId    String
  productId String
  createdAt DateTime @default(now())

  // Relations
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([userId, productId])
  @@map("wishlist")
}

model Banner {
  id          String   @id @default(cuid())
  image       String
  redirectUrl String
  position    Int
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("banners")
}

model Category {
  id          String   @id @default(cuid())
  name        String   @unique
  slug        String   @unique
  description String?
  image       String?
  isActive    Boolean  @default(true)
  position    Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  products    Product[]

  @@map("categories")
}

model Notification {
  id        String           @id @default(cuid())
  userId    String
  type      NotificationType
  title     String
  message   String
  isRead    Boolean          @default(false)
  emailSent Boolean          @default(false)
  metadata  Json?            // Additional data like orderId, productId, etc.
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([isRead])
  @@index([createdAt])
  @@index([userId, isRead])
  // Already well indexed, consider:
  @@index([userId, createdAt, isRead]) // User timeline queries
  @@map("notifications")
}

model CartItem {
  id        String   @id @default(cuid())
  userId    String?  // Optional for guest users
  sessionId String?  // For guest users
  productId String
  quantity  Int      @default(1)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user    User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([userId, productId])
  @@unique([sessionId, productId])
  // CartItem model
  @@index([userId, createdAt])    
  @@index([sessionId, createdAt]) 
  @@map("cart_items")
}